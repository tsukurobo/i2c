
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  000001a8  0000023c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001a8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000007  00800100  00800100  0000023c  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  0000023c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  00000908  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000000c0  00000000  00000000  00000990  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000067a  00000000  00000000  00000a50  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000002bd  00000000  00000000  000010ca  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000461  00000000  00000000  00001387  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000104  00000000  00000000  000017e8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000228  00000000  00000000  000018ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000de  00000000  00000000  00001b14  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 75 00 	jmp	0xea	; 0xea <__vector_24>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 ea       	ldi	r30, 0xA8	; 168
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 30       	cpi	r26, 0x00	; 0
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	11 e0       	ldi	r17, 0x01	; 1
  8c:	a0 e0       	ldi	r26, 0x00	; 0
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a7 30       	cpi	r26, 0x07	; 7
  96:	b1 07       	cpc	r27, r17
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 57 00 	call	0xae	; 0xae <main>
  9e:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <_Z5setupv>:
{
	// set received/requested callbacks
	//I2C_setCallbacks(I2C_received, I2C_requested);

	// init I2C
	I2C_init(I2C_ADDR);
  a6:	80 e1       	ldi	r24, 0x10	; 16
  a8:	0e 94 65 00 	call	0xca	; 0xca <_Z8I2C_inith>
	
//	DDRD = 0b11100000;  //port7,6,5=output
	
	//pw = 70;
	//motor_set_speed(pw);
}
  ac:	08 95       	ret

000000ae <main>:

int main()
{
	setup();
  ae:	0e 94 53 00 	call	0xa6	; 0xa6 <_Z5setupv>
  b2:	ff cf       	rjmp	.-2      	; 0xb2 <main+0x4>

000000b4 <_ZN9I2CRobosa12I2C_receivedEh>:
#include "I2CRobosa.h"

void I2CRobosa::I2C_received(uint8_t received_data) //Å®slave
{
	//
}
  b4:	08 95       	ret

000000b6 <_ZN9I2CRobosa13I2C_requestedEv>:

void I2CRobosa::I2C_requested() //Å®master
{
	//I2C_transmitByte(data);
}
  b6:	08 95       	ret

000000b8 <_Z16I2C_setCallbacksPFvhEPFvvE>:
static void (*I2C_recv)(uint8_t);
static void (*I2C_req)();

void I2C_setCallbacks(void (*recv)(uint8_t), void (*req)())
{
	I2C_recv = recv;
  b8:	90 93 04 01 	sts	0x0104, r25
  bc:	80 93 03 01 	sts	0x0103, r24
	I2C_req = req;
  c0:	70 93 06 01 	sts	0x0106, r23
  c4:	60 93 05 01 	sts	0x0105, r22
}
  c8:	08 95       	ret

000000ca <_Z8I2C_inith>:

void I2C_init(uint8_t address)
{
	cli();
  ca:	f8 94       	cli
	// load address into TWI address register
	TWAR = address << 1;
  cc:	88 0f       	add	r24, r24
  ce:	80 93 ba 00 	sts	0x00BA, r24
	// set the TWCR to enable address matching and enable TWI, clear TWINT, enable TWI interrupt
	TWCR = (1<<TWIE) | (1<<TWEA) | (1<<TWINT) | (1<<TWEN);
  d2:	85 ec       	ldi	r24, 0xC5	; 197
  d4:	80 93 bc 00 	sts	0x00BC, r24
	sei();
  d8:	78 94       	sei
}
  da:	08 95       	ret

000000dc <_Z8I2C_stopv>:

void I2C_stop(void)
{
	// clear acknowledge and enable bits
	cli();
  dc:	f8 94       	cli
	TWCR = 0;
  de:	10 92 bc 00 	sts	0x00BC, r1
	TWAR = 0;
  e2:	10 92 ba 00 	sts	0x00BA, r1
	sei();
  e6:	78 94       	sei
}
  e8:	08 95       	ret

000000ea <__vector_24>:

ISR(TWI_vect)
{
  ea:	1f 92       	push	r1
  ec:	0f 92       	push	r0
  ee:	0f b6       	in	r0, 0x3f	; 63
  f0:	0f 92       	push	r0
  f2:	11 24       	eor	r1, r1
  f4:	2f 93       	push	r18
  f6:	3f 93       	push	r19
  f8:	4f 93       	push	r20
  fa:	5f 93       	push	r21
  fc:	6f 93       	push	r22
  fe:	7f 93       	push	r23
 100:	8f 93       	push	r24
 102:	9f 93       	push	r25
 104:	af 93       	push	r26
 106:	bf 93       	push	r27
 108:	ef 93       	push	r30
 10a:	ff 93       	push	r31
	switch(TW_STATUS)
 10c:	80 91 b9 00 	lds	r24, 0x00B9
 110:	90 e0       	ldi	r25, 0x00	; 0
 112:	88 7f       	andi	r24, 0xF8	; 248
 114:	90 70       	andi	r25, 0x00	; 0
 116:	80 38       	cpi	r24, 0x80	; 128
 118:	91 05       	cpc	r25, r1
 11a:	69 f0       	breq	.+26     	; 0x136 <__vector_24+0x4c>
 11c:	81 38       	cpi	r24, 0x81	; 129
 11e:	91 05       	cpc	r25, r1
 120:	1c f4       	brge	.+6      	; 0x128 <__vector_24+0x3e>
 122:	00 97       	sbiw	r24, 0x00	; 0
 124:	29 f1       	breq	.+74     	; 0x170 <__vector_24+0x86>
 126:	2a c0       	rjmp	.+84     	; 0x17c <__vector_24+0x92>
 128:	88 3a       	cpi	r24, 0xA8	; 168
 12a:	91 05       	cpc	r25, r1
 12c:	79 f0       	breq	.+30     	; 0x14c <__vector_24+0x62>
 12e:	88 3b       	cpi	r24, 0xB8	; 184
 130:	91 05       	cpc	r25, r1
 132:	21 f5       	brne	.+72     	; 0x17c <__vector_24+0x92>
 134:	14 c0       	rjmp	.+40     	; 0x15e <__vector_24+0x74>
	{
		case TW_SR_DATA_ACK:
		// received data from master, call the receive callback
		I2C_recv(TWDR);
 136:	80 91 bb 00 	lds	r24, 0x00BB
 13a:	e0 91 03 01 	lds	r30, 0x0103
 13e:	f0 91 04 01 	lds	r31, 0x0104
 142:	09 95       	icall
		TWCR = (1<<TWIE) | (1<<TWINT) | (1<<TWEA) | (1<<TWEN);
 144:	85 ec       	ldi	r24, 0xC5	; 197
 146:	80 93 bc 00 	sts	0x00BC, r24
		break;
 14a:	1b c0       	rjmp	.+54     	; 0x182 <__vector_24+0x98>
		case TW_ST_SLA_ACK:
		// master is requesting data, call the request callback
		I2C_req();
 14c:	e0 91 05 01 	lds	r30, 0x0105
 150:	f0 91 06 01 	lds	r31, 0x0106
 154:	09 95       	icall
		TWCR = (1<<TWIE) | (1<<TWINT) | (1<<TWEA) | (1<<TWEN);
 156:	85 ec       	ldi	r24, 0xC5	; 197
 158:	80 93 bc 00 	sts	0x00BC, r24
		break;
 15c:	12 c0       	rjmp	.+36     	; 0x182 <__vector_24+0x98>
		case TW_ST_DATA_ACK:
		// master is requesting data, call the request callback
		I2C_req();
 15e:	e0 91 05 01 	lds	r30, 0x0105
 162:	f0 91 06 01 	lds	r31, 0x0106
 166:	09 95       	icall
		TWCR = (1<<TWIE) | (1<<TWINT) | (1<<TWEA) | (1<<TWEN);
 168:	85 ec       	ldi	r24, 0xC5	; 197
 16a:	80 93 bc 00 	sts	0x00BC, r24
		break;
 16e:	09 c0       	rjmp	.+18     	; 0x182 <__vector_24+0x98>
		case TW_BUS_ERROR:
		// some sort of erroneous state, prepare TWI to be readdressed
		TWCR = 0;
 170:	ec eb       	ldi	r30, 0xBC	; 188
 172:	f0 e0       	ldi	r31, 0x00	; 0
 174:	10 82       	st	Z, r1
		TWCR = (1<<TWIE) | (1<<TWINT) | (1<<TWEA) | (1<<TWEN);
 176:	85 ec       	ldi	r24, 0xC5	; 197
 178:	80 83       	st	Z, r24
		break;
 17a:	03 c0       	rjmp	.+6      	; 0x182 <__vector_24+0x98>
		default:
		TWCR = (1<<TWIE) | (1<<TWINT) | (1<<TWEA) | (1<<TWEN);
 17c:	85 ec       	ldi	r24, 0xC5	; 197
 17e:	80 93 bc 00 	sts	0x00BC, r24
		break;
	}
}
 182:	ff 91       	pop	r31
 184:	ef 91       	pop	r30
 186:	bf 91       	pop	r27
 188:	af 91       	pop	r26
 18a:	9f 91       	pop	r25
 18c:	8f 91       	pop	r24
 18e:	7f 91       	pop	r23
 190:	6f 91       	pop	r22
 192:	5f 91       	pop	r21
 194:	4f 91       	pop	r20
 196:	3f 91       	pop	r19
 198:	2f 91       	pop	r18
 19a:	0f 90       	pop	r0
 19c:	0f be       	out	0x3f, r0	; 63
 19e:	0f 90       	pop	r0
 1a0:	1f 90       	pop	r1
 1a2:	18 95       	reti

000001a4 <_exit>:
 1a4:	f8 94       	cli

000001a6 <__stop_program>:
 1a6:	ff cf       	rjmp	.-2      	; 0x1a6 <__stop_program>
